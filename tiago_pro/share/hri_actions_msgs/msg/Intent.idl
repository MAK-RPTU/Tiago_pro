// generated from rosidl_adapter/resource/msg.idl.em
// with input from hri_actions_msgs/msg/Intent.msg
// generated code does not contain a copyright notice


module hri_actions_msgs {
  module msg {
    module Intent_Constants {
      @verbatim (language="comment", text=
        "'intent' constants" "\n"        "see table below for a short description of each." "\n"        "this special intent represents a raw user input, without any specific intent recognised." "\n"        "It is used as a fallback to mean that no user intent was (yet) extracted from the user input" "\n"        "It might happen when, for instance, a chatbot is unable to recognise an intent." "\n"        "An application receiving this intent can choose to ignore it, or further process it by other" "\n"        "means.")
      const string RAW_USER_INPUT = "__raw_user_input__";
      const string ENGAGE_WITH = "__intent_engage_with__";
      const string MOVE_TO = "__intent_move_to__";
      const string GUIDE = "__intent_guide__";
      const string GRAB_OBJECT = "__intent_grab_object__";
      const string BRING_OBJECT = "__intent_bring_object__";
      const string PLACE_OBJECT = "__intent_place_object__";
      const string GREET = "__intent_greet__";
      const string SAY = "__intent_say__";
      const string PRESENT_CONTENT = "__intent_present_content__";
      const string PERFORM_MOTION = "__intent_perform_motion__";
      const string START_ACTIVITY = "__intent_start_activity__";
      const string STOP_ACTIVITY = "__intent_stop_activity__";
      const string WAKEUP = "__intent_wakeup__";
      const string SUSPEND = "__intent_suspend__";
      @verbatim (language="comment", text=
        "'source' constants:" "\n"        "for intents originating from the robot itself")
      const string ROBOT_ITSELF = "__myself__";
      @verbatim (language="comment", text=
        "for intents originating from a external robot control system (for instance, a remote control tablet)")
      const string REMOTE_SUPERVISOR = "__remote_supervisor__";
      @verbatim (language="comment", text=
        "for intents coming from an agent interacting with the robot, but not uniquely" "\n"        "identified")
      const string UNKNOWN_AGENT = "__unknown_agent__";
      @verbatim (language="comment", text=
        "for unknown sources")
      const string UNKNOWN = "__unknown__";
      @verbatim (language="comment", text=
        "'modality' constants:")
      const string MODALITY_SPEECH = "__modality_speech__";
      @verbatim (language="comment", text=
        "both gestures (eg waving) and displacement (eg approaching)")
      const string MODALITY_MOTION = "__modality_motion__";
      const string MODALITY_TOUCHSCREEN = "__modality_touchscreen__";
      const string MODALITY_OTHER = "__modality_other__";
      const string MODALITY_INTERNAL = "__modality_internal__";
    };
    @verbatim (language="comment", text=
      "An intent is an abstract description of an operation to be performed by the" "\n"
      "robot." "\n"
      "" "\n"
      "While inspired by the Android intents" "\n"
      "(https://developer.android.com/reference/android/content/Intent), ROS intents" "\n"
      "are primarily designed to capture user-initiated intents. For instance, a" "\n"
      "button click on a touchscreen, the result of a chatbot-based verbal" "\n"
      "interaction, a command started by a remote user interface." "\n"
      "" "\n"
      "Intents comprise of two mandatory fields: the `intent`, which should be one" "\n"
      "of the available predefined intents, and the `data` which must be a JSON" "\n"
      "object containing the data required to fully instantiate the intent.  While" "\n"
      "the exact content of the JSON object is up to the application, the following" "\n"
      "standard keys can be used to specify the intent's semantic roles (also called" "\n"
      "thematic roles or theta roles):" "\n"
      "" "\n"
      "- `agent`: the agent expected to perform the intent (if omitted, the robot" "\n"
      "itself is assumed)" "\n"
      "- `object` (also named *theme* or *patient* in the linguistics literature): entity" "\n"
      "undergoing the effect of the intent" "\n"
      "- `goal`: entity towards which the intent is directed or moves" "\n"
      "- `recipient`: entity that receives the object (denoted as the `theme`)" "\n"
      "" "\n"
      "Examples:" "\n"
      "" "\n"
      "- \"I want you to go to the kitchen\":" "\n"
      "  - intent: `move_to`" "\n"
      "  - data: {\"goal\":\"kitchen_1\"}" "\n"
      "" "\n"
      "- \"Can you take the groceries to Luke in the kitchen?\"" "\n"
      "  - intent: `bring`" "\n"
      "  - data: {\"object\": \"groceries\"," "\n"
      "           \"goal\":\"kitchen_1\"," "\n"
      "           \"recipient\": \"person_luke\"}")
    struct Intent {
      @verbatim (language="comment", text=
        " Intent name" "\n"
        "" "\n"
        "A string describing the intent." "\n"
        "" "\n"
        "Where suitable, the intent SHOULD be one of the constant defined below." "\n"
        "However, we recognise that the list of intents is possibly large. Therefore," "\n"
        "custom strings are also permissible. If you believe your intent name should" "\n"
        "be standardised and added to the list of pre-defined intents, fill the" "\n"
        "corresponding entry in the \"thematic roles\" table below and submit a pull" "\n"
        "request on this repository.")
      string intent;

      @verbatim (language="comment", text=
        " Intent data" "\n"
        "" "\n"
        "a JSON object containing the data required to fully instantiate the intent." "\n"
        "The keys of the object should be one of the thematic role defined above, or" "\n"
        "the general `other_data`." "\n"
        "" "\n"
        "Each intent defines a specific set of required and optional thematic roles," "\n"
        "listed in the following table (note that the `agent` role can be optionally" "\n"
        "added to all intents, and is omitted from the table for clarity):" "\n"
        "" "\n"
        ".. [please keep the RST table syntax below, as it is used to automatically parse the list of intents by some nodes]#" "\n"
        ".. BEGIN_INTENTS_TABLE" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| **Intent**       | **Description**                                                             | **Required thematic roles**                                 | **Optional thematic roles**                                               |" "\n"
        "+==================+=============================================================================+=============================================================+===========================================================================+" "\n"
        "| `RAW_USER_INPUT` | the intent was not successfully extracted                                   | - `input`: the raw input received from the user             | - `locale`: the language code of the input, if available                  |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `ENGAGE_WITH`    | an agent wants to engage with another one                                   | - `recipient`                                               |                                                                           |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `MOVE_TO`        | navigates to a specific location                                            | - `goal`                                                    |                                                                           |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `GUIDE`          | guides someone somewhere                                                    | - `goal`                                                    |                                                                           |" "\n"
        "|                  |                                                                             | - `recipient`                                               |                                                                           |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `GRAB_OBJECT`    | pick-up a specific object                                                   | - `object`                                                  |                                                                           |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `BRING_OBJECT`   | bring a specific object to a specific place                                 | - `object`                                                  |                                                                           |" "\n"
        "|                  |                                                                             | - `recipient`                                               |                                                                           |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `PLACE_OBJECT`   | put an object on a support (eg a table)                                     | - `recipient`                                               | - `object` (only required if more that one object could be placed)        |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `GREET`          | greet an agent                                                              | - `recipient`                                               |                                                                           |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `SAY`            | says some text, optionally annotated with gestures or expressions           | - `object` (the text to say)                                | - `recipient`                                                             |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `PRESENT_CONTENT`| present (via a screen, pre-recorded text...) predefined content             | - `object` (the content identifier)                         | - `recipient`                                                             |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `PERFORM_MOTION` | performs a motion (eg, a dance or a specific gesture like pointing, waving) | - `object` (the system-specific name of the motion/gesture) | - `recipient`                                                             |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `START_ACTIVITY` | start a scripted behaviour/activity                                         | - `object` (the name of the activity)                       | - any additional parameter required to start the activity                 |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `STOP_ACTIVITY`  | request cancelation of an activity                                          |                                                             | - `object` (the name of the activity. If unset, current main activity)    |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `WAKEUP`         | request reactivation of the system                                          |                                                             |                                                                           |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        "| `SUSPEND`        | request suspension of the system                                            |                                                             |                                                                           |" "\n"
        "+------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------+---------------------------------------------------------------------------+" "\n"
        ".. END_INTENTS_TABLE")
      string data;

      @verbatim (language="comment", text=
        " Intent source" "\n"
        "" "\n"
        "a string describing the source of the intent. This is *not* the node" "\n"
        "which published the intent, but instead the actual agent who expressed the" "\n"
        "intent/command/desire." "\n"
        "`source` can be either one of the constant below, or the specific id of the" "\n"
        "person/agent expressing the intent. In a REP-155 compliant system, this ID" "\n"
        "must be the person ID of the agent.")
      string source;

      @verbatim (language="comment", text=
        " Intent modality" "\n"
        "" "\n"
        "modality used to originally convey the intent: verbal, via the touchscreen," "\n"
        "via a gesture..." "\n"
        "The special modality MODALITY_INTERNAL must be used for intents coming for the" "\n"
        "robot's internal processes (eg 'battery low, I need to charge')" "\n"
        "MUST be one of the MODALITY_ constant below.")
      string modality;

      @verbatim (language="comment", text=
        " Intent priority" "\n"
        "" "\n"
        "the priority of this intent. This MIGHT be used as a hint by the robot's task" "\n"
        "scheduler, however is scheduler is *not* forced to respect this priority" "\n"
        "level. 0 is the lowest priority, 128 is the default priority, 255 is the" "\n"
        "highest priority.")
      uint8 priority;

      @verbatim (language="comment", text=
        " Intent confidence" "\n"
        "" "\n"
        "a value between 0.0 (no confidence) and 1.0 (full confidence) that the intent" "\n"
        "was correctly perceived and interpreted." "\n"
        "" "\n"
        "For instance, a 'waving' gesture could be interpreted as an implicit request" "\n"
        "from a user for the robot to greet back or engage. As this interpretation is" "\n"
        "not certain, the confidence of the intent may be below 1.0.")
      float confidence;
    };
  };
};
